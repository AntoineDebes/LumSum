import { ReactChild, useEffect, useState } from "react";
import { data, orderInfo, steps } from "@/dummy-data/checkout";

import AddressModal from "@/components/AddressModal/AddressModal";
import Aside from "@/components/Aside/Aside";
import AuthMessage from "@/components/AuthMessage/AuthMessage";
import Button from "@/components/Button/Button";
import ButtonWrap from "@/components/ButtonWrap/ButtonWrap";
import CardGrid2 from "@/components/CardGrid2/CardGrid2";
import Container from "@/components/Container/Container";
import ContainerMainContent from "@/components/ContainerMainContent/ContainerMainContent";
import ContainerMainFixedAside from "@/components/ContainerMainFixedAside/ContainerMainFixedAside";
import ContainerMainTitle from "@/components/ContainerMainTitle/ContainerMainTitle";
import Head from "next/head";
import InfoCard from "@/components/InfoCard/InfoCard";
import InfoCardAddress from "@/components/InfoCardAddress/InfoCardAddress";
import InfoCardPayment from "@/components/InfoCardPayment/InfoCardPayment";
import Layout from "@/layout/Layout";
import Link from "next/link";
import OrderSummaryCard from "@/components/OrderSummaryCard/OrderSummaryCard";
import PaymentModal from "@/components/PaymentModal/PaymentModal";
import Steps from "@/components/Steps/Steps";
import iconMasterCard from "@/assets/images/payment-options/mastercard.svg";
import useAddressesStore from "@/store/useAddressesStore";
import useAuthStore from "@/store/useAuthStore";
import usePaymentCardsStore from "@/store/usePaymentCardsStore";
import { useRouter } from 'next/router';
import { useSession } from "next-auth/react"

interface addressType {
  title: string;
  id: string;
  firstName: string,
  lastName: string,
  icon: any;
  mobileNumber: string,
  addressFromMap: string[],
  addressDetails: string,
  radio?: {
    isPresent: boolean;
  };
  isDefault?: boolean;
  info: {
    title: string;
    text: string;
  }[];
}

export const Checkout: any = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [selectedAddress, setSelectedAddress] = useState("");
  const [selectedPayment, setSelectedPayment] = useState("");
  const [isAddressModalVisible, setIsAddressModalVisible] = useState(false);

  // payment modal
  const [isPaymentModalVisible, setIsPaymentModalVisible] = useState(false);
  const showPaymentModal = () => {
    setIsPaymentModalVisible(true);
  };
  const handleOkPaymentModal = () => {
    setIsPaymentModalVisible(false);
  };
  const handleCancelPaymentModal = () => {
    setIsPaymentModalVisible(false);
  };

  const paymentCards = usePaymentCardsStore((state) => state.paymentCards);
  const deletePaymentCard = usePaymentCardsStore(
    (state) => state.deletePaymentCard
  );

  const [editOrCreateModal, setEditOrCreateModal] = useState("Add");

  // location select modal

  const showAddressModal = () => {
    setIsAddressModalVisible(true);
  };

  const handleAddressModalOk = () => {
    setIsAddressModalVisible(false);
  };

  const handleAddressModalCancel = () => {
    setIsAddressModalVisible(false);
  };

  const [showMap, setShowMap] = useState(true);

  // const deletePayment = (id: string) => {
  //   deletePaymentCard(id);
  // };

  const addressCards = useAddressesStore((state) => state.addresses);
  // const deleteAddressCard = useAddressesStore(
  //   (state) => state.deleteAddress
  // );


  let { data: session, status } = useSession();
  const sessionStore = useAuthStore((state) => state.session);
  status = sessionStore ? "authenticated" : "unauthenticated";

  const router = useRouter()

  useEffect(() => {
    if (!sessionStore) {
      router.push('/');
    }
  }, []);

  // if (status === "loading") {
  //   <AuthMessage>
  //     <p>Loading</p>
  //   </AuthMessage>
  // }
  if (status === "unauthenticated") {
    return (
      <AuthMessage>
        {/* <p>Access Denied</p> */}
      </AuthMessage>
    )
  }

  return (
    <>
      <Head>
        <title>Checkout</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container header="minimal" fixedBottom>
        <Aside>
          <Steps current={currentStep} steps={steps} />
          <Steps
            current={currentStep}
            steps={steps}
            direction="horizontal"
            labelPlacement="vertical"
          />
        </Aside>
        <ContainerMainFixedAside>
          {currentStep === 0 && (
            <>
              <ContainerMainTitle>Shipping Address</ContainerMainTitle>
              <ContainerMainContent>
                <CardGrid2>
                  {addressCards.map((address: addressType) => {
                    return (
                      <InfoCardAddress
                        clickable
                        radio
                        isSelected={selectedAddress === address.id}
                        id={address.id}
                        onChange={(id: string) => setSelectedAddress(id)}
                        key={address.id}
                        data={address}
                      />
                    );
                  })}
                  <InfoCard
                    key="add new"
                    addType
                    text="+ Add a new address"
                    onClick={() => showAddressModal()}
                  />
                </CardGrid2>
                <ButtonWrap fixedInMobile>
                  <Button
                    theme="navigator"
                    disabled={selectedAddress === ""}
                    onClick={() => setCurrentStep(1)}
                  >
                    Continue
                  </Button>
                </ButtonWrap>
              </ContainerMainContent>
            </>
          )}
          {currentStep === 1 && (
            <>
              <ContainerMainTitle>Payment</ContainerMainTitle>
              <ContainerMainContent>
                <CardGrid2>
                  {paymentCards.map((paymentCard: any) => {
                    return (
                      <InfoCardPayment
                        icon={iconMasterCard}
                        clickable
                        radio
                        isSelected={selectedPayment === paymentCard.id}
                        id={paymentCard.id}
                        onChange={(id: string) => setSelectedPayment(id)}
                        key={paymentCard.title}
                        data={paymentCard}
                      />
                    );
                  })}
                  <InfoCard
                    key="addNewPayment"
                    addType
                    text="+ Add a new card"
                    onClick={() => showPaymentModal()}
                  />
                </CardGrid2>
                <ButtonWrap fixedInMobile>
                  <Button
                    theme="navigator"
                    disabled={selectedPayment === ""}
                    onClick={() => setCurrentStep(3)}
                  >
                    Place Order
                  </Button>
                </ButtonWrap>
              </ContainerMainContent>
            </>
          )}
          {currentStep === 3 && (
            <>
              <ContainerMainTitle>Thank you for your order</ContainerMainTitle>
              <ContainerMainContent adaptiveWidth>
                <OrderSummaryCard data={orderInfo} />
                <ButtonWrap fixedInMobile>
                  <Link href="/account/profile">
                    <Button theme="navigator" as="a">
                      Back to Account
                    </Button>
                  </Link>
                </ButtonWrap>
              </ContainerMainContent>
            </>
          )}
        </ContainerMainFixedAside>
      </Container>
      <PaymentModal
        title={`${editOrCreateModal} Card`}
        visible={isPaymentModalVisible}
        handleOkPaymentModal={handleOkPaymentModal}
        handleCancelPaymentModal={handleCancelPaymentModal}
      />
      <AddressModal
        title={`${editOrCreateModal} Address`}
        isAddressModalVisible={isAddressModalVisible}
        setShowMap={setShowMap}
        showMap={showMap}
        handleAddressModalOk={handleAddressModalOk}
        handleAddressModalCancel={handleAddressModalCancel}
      />
    </>
  );
};

Checkout.getLayout = function PageLayout(page: ReactChild) {
  return (
    <Layout isMinimal title="Secure Checkout">
      {page}
    </Layout>
  )
}
