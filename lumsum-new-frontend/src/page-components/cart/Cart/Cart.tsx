import Head from "next/head";
import { useState, useEffect } from "react";
import { useRouter } from 'next/router';
import { useSession } from "next-auth/react"
import AuthMessage from "@/components/AuthMessage/AuthMessage";
import Layout from "@/layout/Layout";
import { ReactChild } from "react";
import OrderSummary from "@/components/OrderSummary/OrderSummary";
import ProductInfoPreview from "@/components/ProductInfoPreview/ProductInfoPreview";
import EmptyScreen from "@/components/EmptyScreen/EmptyScreen";
import Container from "@/components/Container/Container";
import ContainerMainFixedAside from "@/components/ContainerMainFixedAside/ContainerMainFixedAside";
import ContainerMainContent from "@/components/ContainerMainContent/ContainerMainContent";
import ContainerMainTitle from "@/components/ContainerMainTitle/ContainerMainTitle";
import * as S from "./Cart.styled";
import iconNoResult from "@/assets/images/no-result.svg";
import useCartItemsStore from "@/store/useCartItemsStore";
import useAuthStore from "@/store/useAuthStore";

const orderSummary = {
  currency: "AED",
  subtotal: 400,
  shippingFee: 10,
  itemCount: 2,
};

export const Cart: any = () => {
  const products = useCartItemsStore((state) => state.cartItems);
  const updateQuantity = useCartItemsStore((state) => state.updateQuantity);

  const decrementCount = (productID: string, quantity: number) => {
    if (quantity > 0) {
      updateQuantity(productID, quantity - 1);
    }
  };

  const incrementCount = (productID: string, quantity: number) => {
    updateQuantity(productID, quantity! + 1);
  };

  let { data: session, status } = useSession();
  const sessionStore = useAuthStore((state) => state.session);
  status = sessionStore ? "authenticated" : "unauthenticated";

  const router = useRouter()

  useEffect(() => {
    if (!sessionStore) {
      router.push('/');
    }
  }, []);

  // if (status === "loading") {
  //   <AuthMessage>
  //     <p>Loading</p>
  //   </AuthMessage>
  // }
  if (status === "unauthenticated") {
    return (
      <AuthMessage>
        {/* <p>Access Denied</p> */}
      </AuthMessage>
    )
  }

  return (
    <>
      <Head>
        <title>Cart</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container fixedBottom>
        {products.length === 0 ? (
          <EmptyScreen
            icon={iconNoResult}
            iconAlt="an empty box"
            title="Your Lumsum cart is empty"
            description="Continue your search"
            linkUrl="/products"
            linkText="Find supplies"
          />
        ) : (
          <>
            <ContainerMainFixedAside rightAside>
              <ContainerMainTitle
                subTitle={`(${products.length} ${products.length === 1 ? "item" : "items"
                  })`}
              >
                Cart
                {/* <C.ContainerMainTitleSubText></C.ContainerMainTitleSubText> */}
              </ContainerMainTitle>
              <ContainerMainContent>
                <ul>
                  {products?.map((product: any) => {
                    return (
                      <S.List1li key={product.id}>
                        <ProductInfoPreview
                          adjustQuantity
                          cardLike
                          data={product}
                          decrementCount={() =>
                            decrementCount(product.id, product.quantity)
                          }
                          incrementCount={() =>
                            incrementCount(product.id, product.quantity)
                          }
                        />
                      </S.List1li>
                    );
                  })}
                </ul>
              </ContainerMainContent>
            </ContainerMainFixedAside>
            <OrderSummary data={orderSummary} />
          </>
        )}
      </Container>
    </>
  );
};

Cart.getLayout = function PageLayout(page: ReactChild) {
  return (
    <Layout>
      {page}
    </Layout>
  )
}
